<script>
<script_header>
</script_header>
<script_body>
' schließenden Backslash an Pfadangabe sicherstellen (anfügen, falls nicht vorhanden)
Function QualifyPath(ByVal sPath)
    If Not Right(sPath, 1) = "\" Then
        sPath = sPath & "\"
    End If
    QualifyPath = sPath
End Function

Function GetData(PlayerIdent)

      If PlayerIdent = "" Then
         GetData = ""
      Else
         TeamCode = Left(PlayerIdent, 1)
         DressNr = Mid(Playerident, 2, Len(PlayerIdent) - 1)
         If not Isnumeric(DressNr) Then
            PName = ""
         Else

            'PName = TSP.GetPlayerByNR(TSP_HPlayer, DressNr, TeamCode, TSP_second_name)
            PNameID = TSP.GetPlayerByNR(TSP_TPlayer, DressNr, TeamCode, TSP_player_id)
            'cc.SF.DebugText "PNameID: " & PNameID
            PName = GetNameTranslation("P", PNameID, TSP_second_name )

         End if

         GetData = PName
      End If
End Function

Function GetDataEx(PlayerIdent)
      dim PName, FName
      If PlayerIdent = "" Then
         GetDataEx = ""
      Else
         TeamCode = Left(PlayerIdent, 1)
         DressNr = Mid(Playerident, 2, Len(PlayerIdent) - 1)
         If not Isnumeric(DressNr) Then
            PName = ""
            FName = ""
         Else

            'PName = TSP.GetPlayerByNR(TSP_HPlayer, DressNr, TeamCode, TSP_second_name)
            PNameID = TSP.GetPlayerByNR(TSP_TPlayer, DressNr, TeamCode, TSP_player_id)
            'cc.SF.DebugText "PNameID: " & PNameID
            FName = trim(GetNameTranslation("P", PNameID, TSP_first_name))
            If Len(FName)>0 THEN
                FName = Left(FName,1) & ". "
            END IF
            PName = GetNameTranslation("P", PNameID, TSP_second_name )

         End if

         GetDataEx = FName & PName
      End If
End Function

Function GetString(ByVal Item, ByVal LangIdx)
    'cc.SF.DebugText Item & " : "  &  LangIdx
    Dim temp, itemfound
    itemfound = False

    SearchItem = lcase(Trim(Item))
    If LangIdx = 0 Then
       Lang = "GER"
    Else
       Lang = "ENG"
    End If
    
    System.BDE_DS_Language.First
    Do While Not System.BDE_DS_Language.EOF
        temp = lcase(trim(System.BDE_DS_Language.FieldByName("Item")))
        If temp = SearchItem Then
            itemfound = True
            Exit Do
        End If
        System.BDE_DS_Language.Next
    Loop

    If itemfound Then
       GetString = NotEmpty(System.BDE_DS_Language.FieldByName(Lang))
    Else
        DbgErr "Item '" & Item & "' not found in Language-database"
        GetString = "?" & Item
    End If
End Function


Function NotEmpty(ByVal Wert)
    If IsNull(Wert) Then Wert = ""
    If IsEmpty(Wert) Then Wert = ""
    If Len(Wert) = 1 Then
        If Asc(Wert) = 0 Then Wert = ""
    End If
    If Trim(Wert) = "" Then Wert = ""
    NotEmpty = Wert
End Function


Sub GetTeamData()
    'oData.RemoveAll()

    TSP.SaveSelection
    TSP.SetTeamPos "A"
    Tsp.SetPlayerPos "First", "ALL", "Actual"
    oData.Item("T_LNAME_1")     = GetNameTranslation("T", TSP.GetSTeam(TSP_db_id), TSP_long_name) ' TSP.GetSTeam(TSP_long_name)
    oData.Item("T_SNAME_1")     = GetNameTranslation("T", TSP.GetSTeam(TSP_db_id), TSP_short_name) ' TSP.GetSTeam(TSP_short_name)
    oData.Item("T_LOGO_1")      = TSP.GetSTeam(TSP_logo)
    oData.Item("T_DSSNAME_1")   = TSP.GetSTeam(TSP_text_1)
    oData.Item("T_SCORE_1")     = TSP.GetScore(0, "A")
    oData.Item("T_OLD_SCORE_1") = TSP.GetScore(1,TSP_A)
    oData.Item("T_AGGSCORE_1")  = MakeNumber(oData.Item("T_SCORE_1"), 1, 0, "", 0) + MakeNumber(oData.Item("T_OLD_SCORE_1"), 1, 0, "", 0)

    Do
        If (TSP.GetTPlayer(TSP_status) = "G") then
            oData.Item("T_GK_BIB_1") = TSP.GetTPlayer(TSP_dress_nr)
            exit do
        End If
    Loop Until TSP.SetPlayerPos("Next", "ALL", "Actual") = False
    
    TSP.SetTeamPos "B"
    Tsp.SetPlayerPos "First", "ALL", "Actual"
    oData.Item("T_LNAME_2")     = GetNameTranslation("T", TSP.GetSTeam(TSP_db_id), TSP_long_name) 'TSP.GetSTeam(TSP_long_name)
    oData.Item("T_SNAME_2")     = GetNameTranslation("T", TSP.GetSTeam(TSP_db_id), TSP_short_name) ' TSP.GetSTeam(TSP_short_name)
    oData.Item("T_LOGO_2")      = TSP.GetSTeam(TSP_logo)
    oData.Item("T_DSSNAME_2")   = TSP.GetSTeam(TSP_text_1)
    oData.Item("T_SCORE_2")     = TSP.GetScore(0, "B")
    oData.Item("T_OLD_SCORE_2") = TSP.GetScore(1, TSP_B)
    oData.Item("T_AGGSCORE_2")  = MakeNumber(oData.Item("T_SCORE_2"), 1, 0, "", 0) + MakeNumber(oData.Item("T_OLD_SCORE_2"), 1, 0, "", 0)
    


    Do
        If (TSP.GetTPlayer(TSP_status) = "G") then
            oData.Item("T_GK_BIB_2") = TSP.GetTPlayer(TSP_dress_nr)
            exit do
        End If
    Loop Until TSP.SetPlayerPos("Next", "ALL", "Actual") = False
    
    

    
    'ShowDataObject oData

    
    TSP.RestoreSelection
End Sub

FUNCTION AutoText(ByRef oData, ByVal strText)
       strText = Replace(strText, "%AX", oData.Item("T_AGGSCORE_1"))
       strText = Replace(strText, "%AY", oData.Item("T_AGGSCORE_2"))
       strText = Replace(strText, "%X", oData.Item("T_SCORE_1"))
       strText = Replace(strText, "%Y", oData.Item("T_SCORE_2"))

       'MakeNumber(oData.Item("T_OLD_SCORE_1"
       
       
       IF oData.Item("T_AGGSCORE_1") > oData.Item("T_AGGSCORE_2") THEN
           strText = Replace(strText, "%WINNER", oData.Item("T_LNAME_1"))
           strText = Replace(strText, "%SHORTWINNER", oData.Item("T_SNAME_1"))
       ELSEIF oData.Item("T_AGGSCORE_1") < oData.Item("T_AGGSCORE_2") THEN
           strText = Replace(strText, "%WINNER", oData.Item("T_LNAME_2"))
           strText = Replace(strText, "%SHORTWINNER", oData.Item("T_SNAME_2"))
       ELSE ' unentschieden nach AGG, d.h. das team mit mehr Auswärtstoren hat gewonnen
           IF oData.Item("T_OLD_SCORE_1") > oData.Item("T_SCORE_2") THEN
               strText = Replace(strText, "%WINNER", oData.Item("T_LNAME_1"))
               strText = Replace(strText, "%SHORTWINNER", oData.Item("T_SNAME_1"))
           ELSE
                strText = Replace(strText, "%WINNER", oData.Item("T_LNAME_2"))
                strText = Replace(strText, "%SHORTWINNER", oData.Item("T_SNAME_2"))
           END IF
       END IF

       strText = Replace(strText, "%TEAMA", oData.Item("T_LNAME_1"))
       strText = Replace(strText, "%TEAMB", oData.Item("T_LNAME_2"))
       
       strText = Replace(strText, "%SHORTTEAMA", oData.Item("T_SNAME_1"))
       strText = Replace(strText, "%SHORTTEAMB", oData.Item("T_SNAME_2"))
       AutoText = strText
       
END FUNCTION


Sub OnMainScoreChange()
    AllTV.TV__Update_MainScore
End Sub


Sub OnMainClockStartStop()

    iTime = TSP.GetTime(TSP_Time, 0)
    iPeriod = TSP.GetTime(TSP_HalfTime)
    
    oData.Item("MAINTIME")   = Check4InJury(iTime, iPeriod)
    oData.Item("INJURYTIME") = GetAddTime(iTime, iPeriod)
    oData.Item("ADDTIME")    = pgMain.edtAddTime.Text

    oData.Item("MAINTIME_DIRECTION") = 1
    If iPeriod = 1 Then
       iLimit = 2700
    Elseif iPeriod = 3 Then
       iLimit = 5400
    Elseif iPeriod = 5 Then
       iLimit = 6300
    Elseif iPeriod = 7 Then
       iLimit = 7200
    Elseif iPeriod = 9 Then
       iLimit = 0
       oData.Item("MAINTIME_DIRECTION") = 0
       oData.Item("INJURYTIME") = -1
    End If

    oData.Item("MAINTIME_LIMIT") = iLimit


    If TSP.GetTime(TSP_Status, 0)  Then
       AllTV.TV__Start_MainClock oData
    Else
       AllTV.TV__Stop_MainClock  oData
    End If
End Sub


Function GetAddTime(ByVal iTime, ByVal iPeriod)

    'msgbox iTime & " <> " & iPeriod

    GetAddTime = -1

    If iPeriod = 1 Then
    
       If iTime >= 2700000 Then
          GetAddTime = iTime - 2700000
       End If

    Elseif iPeriod = 3 Then
       If iTime >= 5400000 Then
          GetAddTime = iTime - 5400000
       End If

    Elseif iPeriod = 5 Then
       If iTime >= 6300000 Then
          GetAddTime = iTime - 6300000
       End If

    Elseif iPeriod = 7 Then
       If iTime >= 7200000 Then
          GetAddTime = iTime - 7200000
       End If
    End If
End Function


Function Check4InJury(ByVal iTime, ByVal iPeriod)

    Check4InJury = iTime


    If iPeriod = 1 Then
       If iTime >= 2700000 Then
          Check4InJury = 2700000
       End If

    Elseif iPeriod = 3 Then
       If iTime >= 5400000 Then
          Check4InJury = 5400000
       End If

    Elseif iPeriod = 5 Then
       If iTime >= 6300000 Then
          Check4InJury = 6300000
       End If

    Elseif iPeriod = 7 Then
       If iTime >= 7200000 Then
          Check4InJury = 7200000
       End If
    End If
End Function


Sub ReadTVConnections()
    Dim intCount, i, k

    dim previous    ' store the previous selection

    For k = 1 to 4
        with pnConnections.ComponentByName("cmb_Conn_" & CStr(k))
            ' Remember the actual selection
            if .Itemindex <> -1 Then
               previous = .Items.strings(.itemIndex)
            else
               previous = ""
            end if

            .Items.Clear    ' Clear all items
            For i = 0 To CC.TVConnections.GetConnectionCount - 1    ' Add all available connections
                .Items.Add(CC.TVConnections.Connections(i).Address)
            next
            
            .ItemIndex = .Items.IndexOf(previous)   ' reselect previous selection (if possible)
        end with
    Next

    Enable_apply_button Nothing     ' Check current settings
    pnConnections.Btn_SaveConnections.Visible = True
    pnConnections.BringToFront
    pnConnections.Visible = True
End Sub

Sub SaveTVConnections (Sender)
    if AllTV.TV_InitConnections Then
        pnConnections.Btn_SaveConnections.Visible = False
        pnConnections.SendToBack ' Verstecke das ToolWindow wenn es nicht angedockt wurde
        if pnConnections.Floating Then pnConnections.Visible = False
    Else
        pnConnections.Btn_SaveConnections.Visible = True
        pnConnections.BringToFront
    end if
End Sub


'*******************************************************************************
Function EmptyToZero(ByVal Value)
    if Value = "-1" then Value = 0
    If Not IsNumeric(Value) Then
        EmptyToZero = 0
    Else
        EmptyToZero = CLng(Value)
    End If
    EmptyToZero = CStr(EmptyToZero)
End Function

' ***********************************************************************************************************
' Send message to Debug window (black font)
Sub Dbg(ByVal Message)
    CC.SF.DebugText Message, 0
End Sub


' ***********************************************************************************************************
' Send error message to Debug window (red font)
Sub DbgErr(ByVal Message)
    CC.SF.DebugText Message, 255
    CC.SF.Beep
End Sub

' ***********************************************************************************************************
' Trennt händische Eingaben in Edits etc. nach Sprache
Function GetLangTxt(Input, ByVal sType)
  Dim ArrField, Tmp

     GetLangTxt = ""

     If Instr(1, Input,Trim("$$")) = 0 then
        GetLangTxt = Input
     Else
        If sType = "0" Then  'Je nach Verbindungstyp Feldzuweisung
           ArrField = 0
         ElseIf sType = "1" Then
           ArrField = 1
         End If

        Tmp = Split(Input, "$$", -1, 1)

        GetLangTxt = Tmp(ArrField)
     End if
End Function




' ******************************************************************************
' Gibt den Inhalt eines Dictionaryobjectes wieder
' ******************************************************************************
PRIVATE FUNCTION ShowDataObject(ByRef Data)
    IF IsObject(Data) THEN
        myData = Data.Items
        myKeys = Data.Keys
        myText = ""
        FOR i =0 TO UBound(myData)
            IF NOT ( isarray(myData(i)) or isobject(myData(i))) THEN
                myText = myText & myKeys(i) & ":  " & myData(i) & vbCrLf
            ELSE

            END IF
        NEXT
        cc.sf.DebugText myText, c__MType_Dbg
    ELSE
        cc.sf.DebugText "ShowDataObject - NoData", c__MType_Dbg
    END IF
END FUNCTION

' ******************************************************************************
' Wandelt einen Wert fehlertolerant in einen Boolschen Wert um
' ******************************************************************************
FUNCTION CBoolType(ByVal Value, ByVal DefVal)
    DIM bResult

    ON ERROR Resume NEXT
    Err.Clear ' Fehler löschen, um  neue Fehler erkennen zu können

    ' Vorgabewert formatieren
    DefVal = CBool(DefVal)

    ' wenn Fehler bei Umwandlung, Vorgabewert auf False setzen
    IF NOT Err.Number = 0 THEN
        DefVal = False
        Err.Clear
    END IF

    ' Wert konvertieren
    bResult = CBool(Value)

    ' wenn Fehler bei Umwandlung, dann Vorgabewert einsetzen
    IF NOT Err.Number = 0 THEN
        bResult = DefVal
    END IF

    CBoolType = bResult
END FUNCTION


' ******************************************************************************
' Wandelt eine Zahl fehlertolerant in den gewünschten Typ und überprüft den zulässigen Wertebereich
' TargetType: VB-Datentyp-Konstanten (vbDouble als Default, da größter Wertebereich)
' Min/Max: Null (nicht 0 !) übergeben, um Prüfung zu deaktivieren
' ******************************************************************************
FUNCTION CNumType(ByVal Value, ByVal TargetType, ByVal Min, ByVal Max, ByVal DefaultValue)
    DIM vResult, sDecimalSign, bUseDefault

    ' Dezimaltrennzeichen ermitteln
    sDecimalSign = Chr(CC.SF.DecimalSeparator)

    ON ERROR Resume NEXT
    Err.Clear ' Fehler löschen, um  neue Fehler erkennen zu können

    bUseDefault = False

    IF NOT VarType(Value) = TargetType THEN
        ' Minimalwert in richtigen Typ umwandeln (bei Single/Double-Werte Dezimaltrennzeichen überprüfen)
        SELECT CASE TargetType
            CASE vbByte     : vResult = CByte(Value)
            CASE vbInteger  : vResult = CInt(Value)
            CASE vbLong     : vResult = CLng(Value)
            CASE vbSingle   : vResult = CSng(Replace(Replace(CStr(Value), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
            CASE vbCurrency : vResult = CCur(Replace(Replace(CStr(Value), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
            CASE ELSE       : vResult = CDbl(Replace(Replace(CStr(Value), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
        END SELECT

        ' wenn Fehler bei Umwandlung, dann Vorgabewert einsetzen
        IF NOT Err.Number = 0 THEN
            bUseDefault = True
            Err.Clear
        END IF
    ELSE
        vResult = Value
    END IF

    ' Überprüfen, ob gesetzte Grenzen für Wertebereich eingehalten sind (bei Min und Max schaltet Null die Überprüfung ab)
    IF NOT (bUseDefault Or IsNull(Min)) THEN
        IF NOT VarType(Min) = TargetType THEN
            ' Minimalwert in richtigen Typ umwandeln (bei Single/Double-Werte Dezimaltrennzeichen überprüfen)
            SELECT CASE TargetType
                CASE vbByte     : Min = CByte(Min)
                CASE vbInteger  : Min = CInt(Min)
                CASE vbLong     : Min = CLng(Min)
                CASE vbSingle   : Min = CSng(Replace(Replace(CStr(Min), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
                CASE vbCurrency : Min = CCur(Replace(Replace(CStr(Min), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
                CASE ELSE       : Min = CDbl(Replace(Replace(CStr(Min), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
            END SELECT
        END IF

        IF Err.Number = 0 THEN
            IF vResult < Min THEN bUseDefault = True
        ELSE
            Err.Clear
        END IF
    END IF

    IF NOT (bUseDefault Or IsNull(Max)) THEN
        IF NOT VarType(Max) = TargetType THEN
            ' Maximalwert in richtigen Typ umwandeln (bei Single/Double-Werte Dezimaltrennzeichen überprüfen)
            SELECT CASE TargetType
                CASE vbByte     : Max = CByte(Max)
                CASE vbInteger  : Max = CInt(Max)
                CASE vbLong     : Max = CLng(Max)
                CASE vbSingle   : Max = CSng(Replace(Replace(CStr(Max), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
                CASE vbCurrency : Max = CCur(Replace(Replace(CStr(Max), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
                CASE ELSE       : Max = CDbl(Replace(Replace(CStr(Max), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
            END SELECT
        END IF

        IF Err.Number = 0 THEN
            IF vResult > Max THEN bUseDefault = True
        ELSE
            Err.Clear
        END IF
    END IF

    IF bUseDefault THEN
        IF NOT VarType(DefaultValue) = TargetType THEN
            ' Vorgabewert in richtigen Typ umwandeln (bei Single/Double-Werte Dezimaltrennzeichen überprüfen)
            SELECT CASE TargetType
                CASE vbByte     : DefaultValue = CByte(DefaultValue)
                CASE vbInteger  : DefaultValue = CInt(DefaultValue)
                CASE vbLong     : DefaultValue = CLng(DefaultValue)
                CASE vbSingle   : DefaultValue = CSng(Replace(Replace(CStr(DefaultValue), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
                CASE vbCurrency : DefaultValue = CCur(Replace(Replace(CStr(DefaultValue), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
                CASE ELSE       : DefaultValue = CDbl(Replace(Replace(CStr(DefaultValue), ",", sDecimalSign), ".", sDecimalSign))' korrektes Dezimaltrennzeichen setzen
            END SELECT

            ' wenn Fehler bei Umwandlung, Vorgabewert auf 0 setzen
            IF NOT Err.Number = 0 THEN
                DefaultValue = 0
                Err.Clear
            END IF
        END IF

        vResult = DefaultValue
    END IF

    CNumType = vResult
END FUNCTION



FUNCTION GetNameTrans(ByVal strValue)
    DIM retValue
    IF objNameTrans.Exists(strValue) THEN ' Übersetzung
        objNameTrans.Item(strValue) = ""
        
    ELSE
        retValue = trim(objNameTrans.Item(strValue))
        IF LEN(retValue) = 0 THEN
            GetNameTrans = strValue ' original Wert zurückgeben
        ELSE
            GetNameTrans = objNameTrans.Item(strValue) ' Übersetzung zurückgeben
        END IF
    END IF
END FUNCTION

function TSP_get_info_from_db(db, what, where, value)
    dim out_ : set out_ = System.BdeDataSource1
    if (trim(what) = "") or (trim(where) = "") or (trim(value) = "") then
'        msgbox "Fehler in der SQL Abfrage!  SELECT "& what &" FROM "& db &".DBF WHERE " & where & "='"& value &"'", clRed
        TSP_get_info_from_db = ""
        exit function
    end if
     on error resume next
     System.BdeDataSource1.SQL = "SELECT "& what &" FROM "& db &".DBF WHERE " & where & "='"& value &"'"
     ' NICHT RAUSNEHMEN!! Liegt an einer Besonderheit der Players_2 DB
     if db = "PLAYERS_2" then System.BdeDataSource1.SQL = System.BdeDataSource1.SQL & " AND team_id<>'0'"
    'cc.sf.debugtext   System.BdeDataSource1.SQL
     out_.Active       = True
     System.BdeDataSource1.First
     TSP_get_info_from_db = System.BdeDataSource1.FieldByName(what)
     System.BdeDataSource1.Last
     System.BdeDataSource1.Active = False
 'cc.sf.DebugText "SQL Finis"
     on error goto 0

    ' if TSP.LoadSQLData("SELECT "&  what & " FROM " & Ucase(db) & " WHERE " & where & "='" & value & "'") then
    '        TSP_get_info_from_db = TSP.GetSQLData(what)
    ' end if
end function

</script_body>
</script>
